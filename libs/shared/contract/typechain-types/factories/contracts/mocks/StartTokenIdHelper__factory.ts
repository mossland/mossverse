/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StartTokenIdHelper,
  StartTokenIdHelperInterface,
} from "../../../contracts/mocks/StartTokenIdHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "startTokenId_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "startTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161015f38038061015f83398181016040528101906100329190610054565b806000819055505061009e565b60008151905061004e81610087565b92915050565b60006020828403121561006657600080fd5b60006100748482850161003f565b91505092915050565b6000819050919050565b6100908161007d565b811461009b57600080fd5b50565b60b3806100ac6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063e6798baa14602d575b600080fd5b60336047565b604051603e9190605a565b60405180910390f35b60005481565b6054816073565b82525050565b6000602082019050606d6000830184604d565b92915050565b600081905091905056fea2646970667358221220bde1a5df9a82a9fff3f5c9ce45e1510bcd66684657c4cd66d1836a6eb932a92264736f6c63430008040033";

type StartTokenIdHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StartTokenIdHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StartTokenIdHelper__factory extends ContractFactory {
  constructor(...args: StartTokenIdHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    startTokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StartTokenIdHelper> {
    return super.deploy(
      startTokenId_,
      overrides || {}
    ) as Promise<StartTokenIdHelper>;
  }
  override getDeployTransaction(
    startTokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(startTokenId_, overrides || {});
  }
  override attach(address: string): StartTokenIdHelper {
    return super.attach(address) as StartTokenIdHelper;
  }
  override connect(signer: Signer): StartTokenIdHelper__factory {
    return super.connect(signer) as StartTokenIdHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StartTokenIdHelperInterface {
    return new utils.Interface(_abi) as StartTokenIdHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StartTokenIdHelper {
    return new Contract(address, _abi, signerOrProvider) as StartTokenIdHelper;
  }
}
